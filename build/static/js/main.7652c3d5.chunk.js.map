{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","useEffect","onLoad","a","checkIfWalletIsConnected","window","addEventListener","removeEventListener","console","log","getGifList","provider","getProvider","program","Program","account","fetch","publicKey","createGifAccount","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","toString","solana","isPhantom","connect","onlyIfTrusted","response","alert","error","connectWallet","onInputChange","event","value","target","connection","Connection","Provider","sendGif","length","addGif","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8UAAe,MAA0B,yC,gDCSjCA,EAA2BC,IAA3BD,cAGFE,GAH6BD,IAAZE,QAGXC,OAAOC,OAAOC,EAAGC,SAASC,YAChCC,EAAS,IAAIC,WAAWR,GACxBS,EAAcV,IAAKE,QAAQS,cAAcH,GAGzCI,EAAY,IAAIC,YAAUC,EAAIC,SAASC,SAGvCC,EAAUC,wBAAc,UAGxBC,EACiB,YAIjBC,EAAiB,cACjBC,EAAY,8BAA0BD,GA8N7BE,EArNH,WACV,MAA0CC,mBAAS,MAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACR,IAAMC,EAAM,uCAAG,sBAAAC,EAAA,sEACPC,IADO,2CAAH,qDAMZ,OAFAC,OAAOC,iBAAiB,OAAQJ,GAEzB,WACLG,OAAOE,oBAAoB,OAAQL,MAEpC,IAEHD,qBAAU,WACJN,IACFa,QAAQC,IAAI,wBACZC,OAED,CAACf,IAEJ,IAAMe,EAAU,uCAAG,gCAAAP,EAAA,sEAETQ,EAAWC,IACXC,EAAU,IAAIC,IAAQ7B,EAAKF,EAAW4B,GAH7B,SAIOE,EAAQE,QAAQlC,YAAYmC,MAChDnC,EAAYoC,WALC,OAITF,EAJS,OAQfP,QAAQC,IAAI,kBAAmBM,GAC/Bf,EAAWe,EAAQhB,SATJ,kDAWfS,QAAQC,IAAI,wBAAZ,MACAT,EAAW,MAZI,0DAAH,qDAgBVkB,EAAgB,uCAAG,8BAAAf,EAAA,sEAEfQ,EAAWC,IACXC,EAAU,IAAIC,IAAQ7B,EAAKF,EAAW4B,GAC5CH,QAAQC,IAAI,QAJS,SAKfI,EAAQM,IAAIC,cAAc,CAC9BC,SAAU,CACRxC,YAAaA,EAAYoC,UACzBK,KAAMX,EAASY,OAAON,UACtBO,cAAetD,EAAcuD,WAE/BC,QAAS,CAAC7C,KAXS,cAarB2B,QAAQC,IACN,wCACA5B,EAAYoC,UAAUU,YAfH,SAiBfjB,IAjBe,yDAmBrBF,QAAQC,IAAI,sCAAZ,MAnBqB,0DAAH,qDAuBhBL,EAAwB,uCAAG,gCAAAD,EAAA,oEAEVE,SAAXuB,EAFqB,EAErBA,UAEMA,EAAOC,UAJQ,wBAK3BrB,QAAQC,IAAI,wBALe,SAOJmB,EAAOE,QAAQ,CAAEC,eAAe,IAP5B,OAOrBC,EAPqB,OAQ3BxB,QAAQC,IAAI,4BAA6BuB,EAASf,UAAUU,YAE5D/B,EAAiBoC,EAASf,UAAUU,YAVT,wBAY3BM,MAAM,8DAZqB,0DAe7BzB,QAAQ0B,MAAR,MAf6B,0DAAH,qDAmBxBC,EAAa,uCAAG,gCAAAhC,EAAA,2DACDE,SAAXuB,EADY,EACZA,QADY,gCAIKA,EAAOE,UAJZ,OAIZE,EAJY,OAKlBxB,QAAQC,IAAI,6BAA8BuB,EAASf,UAAUU,YAC7D/B,EAAiBoC,EAASf,UAAUU,YANlB,2CAAH,qDAUbS,EAAgB,SAACC,GACrB,IAAQC,EAAUD,EAAME,OAAhBD,MACRxC,EAAcwC,IAGV1B,EAAc,WAClB,IAAM4B,EAAa,IAAIC,aAAWrD,EAASE,GAM3C,OALiB,IAAIoD,IACnBF,EACAnC,OAAOuB,OACPtC,IAKEqD,EAAO,uCAAG,8BAAAxC,EAAA,yDACY,IAAtBN,EAAW+C,OADD,uBAEZpC,QAAQC,IAAI,sBAFA,iCAKdX,EAAc,IACdU,QAAQC,IAAI,YAAaZ,GANX,SAQNc,EAAWC,IACXC,EAAU,IAAIC,IAAQ7B,EAAKF,EAAW4B,GAThC,UAWNE,EAAQM,IAAI0B,OAAOhD,EAAY,CACnCwB,SAAU,CACRxC,YAAaA,EAAYoC,UACzBK,KAAMX,EAASY,OAAON,aAdd,eAiBZT,QAAQC,IAAI,mCAAoCZ,GAjBpC,UAmBNa,IAnBM,0DAqBZF,QAAQC,IAAI,qBAAZ,MArBY,0DAAH,qDAiFb,OACE,qBAAKqC,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,SAAb,qCACA,mBAAGA,UAAU,WAAb,+DAGEnD,GA/DR,wBACEmD,UAAU,mCACVC,QAASZ,EAFX,+BAgEOxC,IAtDS,OAAZI,EAEA,qBAAK+C,UAAU,sBAAf,SACE,wBACEA,UAAU,+BACVC,QAAS7B,EAFX,kEAYF,sBAAK4B,UAAU,sBAAf,UACE,uBACEE,SAAU,SAACX,GACTA,EAAMY,iBACNN,KAHJ,UAME,uBACEO,KAAK,OACLC,YAAY,kBACZb,MAAOzC,EACPuD,SAAUhB,IAEZ,wBAAQc,KAAK,SAASJ,UAAU,+BAAhC,uBAIF,qBAAKA,UAAU,WAAf,SAEG/C,EAAQsD,KAAI,SAACC,EAAMC,GAAP,OACX,qBAAKT,UAAU,WAAf,SACE,qBAAKU,IAAKF,EAAKG,WADcF,eAqBrC,sBAAKT,UAAU,mBAAf,UACE,qBAAKY,IAAI,eAAeZ,UAAU,eAAeU,IAAKG,IACtD,mBACEb,UAAU,cACVc,KAAMpE,EACN+C,OAAO,SACPsB,IAAI,aAJN,6BAKetE,cC/OzBuE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.7652c3d5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport kp from './keypair.json'\nimport idl from './idl.json';\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: 'processed',\n};\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n  // 'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n  // 'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n  // 'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n  // 'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp',\n];\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n\n    return () => {\n      window.removeEventListener('load', onLoad);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log('Got the account', account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log('Error in getGifList: ', error);\n      setGifList(null);\n    }\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log('ping');\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        'Created a new BaseAccount w/ address:',\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log('Error creating BaseAccount account:', error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana && solana.isPhantom) {\n        console.log('Phantom Wallet found');\n\n        const response = await solana.connect({ onlyIfTrusted: true });\n        console.log('Connected with public key', response.publicKey.toString());\n\n        setWalletAddress(response.publicKey.toString());\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log('No gif link given!');\n      return;\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log('GIF successfully sent to program', inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log('Error sending GIF:', error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// local wallet: DaEuDu8FvMBe2VCRNYdoBJrAQwSW1ecE39Uc6jC6adoa\n// program address: 8zZ3ZfM4hWSn39Rgv2YrC4KvN2XX554qm7SVSi7fdXFU\n// program id: 8zZ3ZfM4hWSn39Rgv2YrC4KvN2XX554qm7SVSi7fdXFU"],"sourceRoot":""}